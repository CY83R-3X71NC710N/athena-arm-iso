name: Build and Release Athena OS ARM64 ISO

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0-arm64)'
        required: true
        default: 'v1.0.0-arm64'
      fedora_version:
        description: 'Fedora release version'
        required: true
        default: '42'
  push:
    tags:
      - 'v*-arm64'
      - 'v*-aarch64'

env:
  FEDORA_VERSION: ${{ github.event.inputs.fedora_version || '42' }}
  ISO_NAME: athenaos-live-aarch64.iso

jobs:
  build-iso:
    name: Build Athena OS ARM64 ISO
    runs-on: ubuntu-latest  # Use Ubuntu runner for Docker support
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          echo "📦 Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y wget curl qemu-user-static
          docker --version
      
      - name: Build ISO using Docker
        run: |
          echo "🏗️ Starting ARM64 ISO build..."
          docker run --rm \
            --platform linux/arm64 \
            --privileged \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e FEDORA_VERSION="${FEDORA_VERSION}" \
            -e ISO_NAME="${ISO_NAME}" \
            --tmpfs /tmp:size=2g \
            --shm-size=512m \
            --memory=5g \
            registry.fedoraproject.org/fedora:latest \
            bash -c '
              echo "🔧 Setting up build environment..."
              echo "Architecture: $(uname -m)"
              df -h
              echo "📦 Installing build dependencies..."
              dnf update -y
              dnf install -y lorax livemedia-creator pykickstart git squashfs-tools \
                             dosfstools genisoimage isomd5sum createrepo_c xorriso \
                             anaconda hfsplus-tools
              dnf clean all
              git config --global user.email "build@athenaos.org"
              git config --global user.name "Athena OS Build"
              mkdir -p /tmp/livecd-cache /tmp/livecd-tmp
              # Remove results directory if it exists (livemedia-creator requires it to not exist)
              rm -rf ./results
              mkdir -p ./results
              echo "🚀 Building ISO with livemedia-creator..."
              echo "Using kickstart file: athena-iso.ks"
              echo "Target ISO name: ${ISO_NAME}"
              livemedia-creator \
                --make-iso \
                --ks athena-iso.ks \
                --no-virt \
                --iso-only \
                --iso-name "${ISO_NAME}" \
                --resultdir ./results \
                --releasever "${FEDORA_VERSION}" \
                --arch aarch64 \
                --logfile /tmp/lmc-build.log || {
                  echo "❌ livemedia-creator failed! Checking logs..."
                  if [ -f /tmp/lmc-build.log ]; then
                    echo "=== Build log ==="
                    tail -50 /tmp/lmc-build.log
                  fi
                  echo "=== Available space ==="
                  df -h
                  echo "=== Files in current directory ==="
                  ls -la
                  exit 1
                }
              echo "✅ livemedia-creator completed successfully"
              echo "Checking for created ISO files..."
              ls -la ./results/*.iso 2>/dev/null || echo "No ISO files in results directory"
              if [ -f "./results/${ISO_NAME}" ]; then
                echo "✅ ISO created: ./results/${ISO_NAME}"
              else
                echo "❌ No ISO file found!"
                if [ -f /tmp/lmc-build.log ]; then
                  cat /tmp/lmc-build.log
                fi
                exit 1
              fi
              if [ -f "./results/${ISO_NAME}" ]; then
                echo "✅ Final ISO verification:"
                ls -lh "./results/${ISO_NAME}"
                file "./results/${ISO_NAME}"
              fi
            '
      
      - name: Cleanup Docker
        if: always()
        run: |
          echo "🧹 Cleaning up Docker resources..."
          docker system prune -f || true
      
      - name: Verify ISO was created
        run: |
          echo "🔍 Checking for created ISO..."
          echo "Contents of current directory:"
          ls -la
          echo "Contents of results directory:"
          ls -la ./results/ || echo "Results directory not found"
          if [ -f "./results/${ISO_NAME}" ]; then
            echo "✅ ISO created successfully: ${ISO_NAME}"
            ls -lh "./results/${ISO_NAME}"
            ISO_SIZE=$(du -h "./results/${ISO_NAME}" | cut -f1)
            ISO_SHA256=$(sha256sum "./results/${ISO_NAME}" | cut -d' ' -f1)
            echo "ISO_SIZE=${ISO_SIZE}" >> $GITHUB_ENV
            echo "ISO_SHA256=${ISO_SHA256}" >> $GITHUB_ENV
            cd results
            sha256sum "${ISO_NAME}" > "${ISO_NAME}.sha256"
            sha512sum "${ISO_NAME}" > "${ISO_NAME}.sha512"
            cd ..
          else
            echo "❌ ISO build failed - file not found at expected location"
            find . -name "*.iso" -type f 2>/dev/null || echo "No ISO files found anywhere"
            ls -la ./results/ || echo "Results directory doesn't exist"
            exit 1
          fi
      
      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: athenaos-arm64-iso
          path: |
            results/${{ env.ISO_NAME }}
            results/${{ env.ISO_NAME }}.sha256
            results/${{ env.ISO_NAME }}.sha512
          retention-days: 30
      
      - name: Create Release Notes
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: |
          cat > release_notes.md << EOF
          # Athena OS ARM64 Live ISO
          
          ## Build Information
          - **Architecture**: ARM64 (aarch64)
          - **Fedora Base**: ${{ env.FEDORA_VERSION }}
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **ISO Size**: ${{ env.ISO_SIZE }}
          - **SHA256**: \`${{ env.ISO_SHA256 }}\`
          
          ## Compatibility
          - ✅ Apple Silicon Macs (M1, M2, M3, M4 series)
          - ✅ ARM64 servers and workstations
          - ✅ ARM64 development boards with UEFI
          - ❌ x86/x64 systems (use standard Athena OS for those)
          
          ## Boot Requirements
          - UEFI firmware (no legacy BIOS support)
          - Minimum 4GB RAM recommended
          - Secure Boot compatible
          
          ## Installation
          1. Download the ISO file
          2. Verify checksum: \`sha256sum ${{ env.ISO_NAME }}\`
          3. Flash to USB using tools like \`dd\`, Balena Etcher, or Ventoy
          4. Boot from USB on your ARM64 device
          
          ## Changes in this ARM64 Version
          - UEFI-only boot configuration
          - ARM64-optimized GRUB bootloader
          - Removed x86-specific virtualization tools
          - Included ARM64-compatible drivers and firmware
          
          ## Files in this Release
          - \`${{ env.ISO_NAME }}\` - The main ISO file
          - \`${{ env.ISO_NAME }}.sha256\` - SHA256 checksum
          - \`${{ env.ISO_NAME }}.sha512\` - SHA512 checksum
          EOF
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
          name: "Athena OS ARM64 ${{ github.event.inputs.release_tag || github.ref_name }}"
          body_path: release_notes.md
          files: |
            results/${{ env.ISO_NAME }}
            results/${{ env.ISO_NAME }}.sha256
            results/${{ env.ISO_NAME }}.sha512
          draft: false
