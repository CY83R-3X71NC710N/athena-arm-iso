name: Build and Release Athena OS ARM64 ISO

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0-arm64)'
        required: true
        default: 'v1.0.0-arm64'
      fedora_version:
        description: 'Fedora release version'
        required: true
        default: '42'
  push:
    tags:
      - 'v*-arm64'
      - 'v*-aarch64'

env:
  FEDORA_VERSION: ${{ github.event.inputs.fedora_version || '42' }}
  ISO_NAME: athenaos-live-aarch64.iso

jobs:
  build-iso:
    name: Build Athena OS ARM64 ISO
    runs-on: macos-latest  # Native ARM64 runner
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Verify ARM64 Architecture
      run: |
        echo "🔍 Verifying we're running on ARM64..."
        uname -m
        if [[ "$(uname -m)" != "arm64" ]]; then
          echo "❌ Not running on ARM64 architecture"
          exit 1
        fi
        echo "✅ Confirmed: Running on native ARM64"
      
    - name: Install Dependencies
      run: |
        echo "📦 Installing build dependencies..."
        
        # Install Homebrew packages needed for the build
        brew update
        brew install wget curl
        
        # Install Podman for containerized build (lighter than Docker on macOS)
        brew install podman
        
        # Initialize podman machine
        podman machine init --cpus 4 --memory 8192
        podman machine start
        
    - name: Build ISO using Podman
      run: |
        # Create a directory for build results
        mkdir -p ./results
        
        echo "🏗️ Starting ARM64 ISO build..."
        
        # Run the build in a Fedora container using Podman (native ARM64)
        podman run --rm \
          --arch arm64 \
          -v "$(pwd):/workspace:Z" \
          -w /workspace \
          -e FEDORA_VERSION="${FEDORA_VERSION}" \
          -e ISO_NAME="${ISO_NAME}" \
          registry.fedoraproject.org/fedora:latest \
          bash -c '
            echo "🔧 Setting up build environment..."
            
            # Verify architecture inside container
            echo "Architecture: $(uname -m)"
            
            # Install required packages
            dnf update -y
            dnf install -y lorax pykickstart git anaconda livecd-tools
            
            # Set git config (required by some build tools)
            git config --global user.email "build@athenaos.org"
            git config --global user.name "Athena OS Build"
            
            echo "🚀 Building ISO with livemedia-creator..."
            
            # Build the ISO using livemedia-creator
            livemedia-creator \
              --make-iso \
              --ks athena-iso.ks \
              --no-virt \
              --iso-only \
              --iso-name "${ISO_NAME}" \
              --resultdir ./results \
              --releasever "${FEDORA_VERSION}" \
              --arch aarch64 \
              --verbose
          '
          
    - name: Cleanup Podman
      if: always()
      run: |
        echo "🧹 Cleaning up Podman resources..."
        podman machine stop || true
        podman machine rm -f || true
          
    - name: Verify ISO was created
      run: |
        if [ -f "./results/${ISO_NAME}" ]; then
          echo "✅ ISO created successfully: ${ISO_NAME}"
          ls -lh "./results/${ISO_NAME}"
          
          # Get ISO size and checksum
          ISO_SIZE=$(du -h "./results/${ISO_NAME}" | cut -f1)
          ISO_SHA256=$(sha256sum "./results/${ISO_NAME}" | cut -d' ' -f1)
          
          echo "ISO_SIZE=${ISO_SIZE}" >> $GITHUB_ENV
          echo "ISO_SHA256=${ISO_SHA256}" >> $GITHUB_ENV
          
          # Create checksums file
          cd results
          sha256sum "${ISO_NAME}" > "${ISO_NAME}.sha256"
          sha512sum "${ISO_NAME}" > "${ISO_NAME}.sha512"
          cd ..
        else
          echo "❌ ISO build failed - file not found"
          echo "Contents of results directory:"
          ls -la ./results/
          exit 1
        fi
        
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v4
      with:
        name: athenaos-arm64-iso
        path: |
          results/${{ env.ISO_NAME }}
          results/${{ env.ISO_NAME }}.sha256
          results/${{ env.ISO_NAME }}.sha512
        retention-days: 30
        
    - name: Create Release Notes
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      run: |
        cat > release_notes.md << EOF
        # Athena OS ARM64 Live ISO
        
        ## Build Information
        - **Architecture**: ARM64 (aarch64)
        - **Fedora Base**: ${{ env.FEDORA_VERSION }}
        - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **ISO Size**: ${{ env.ISO_SIZE }}
        - **SHA256**: \`${{ env.ISO_SHA256 }}\`
        
        ## Compatibility
        - ✅ Apple Silicon Macs (M1, M2, M3, M4 series)
        - ✅ ARM64 servers and workstations
        - ✅ ARM64 development boards with UEFI
        - ❌ x86/x64 systems (use standard Athena OS for those)
        
        ## Boot Requirements
        - UEFI firmware (no legacy BIOS support)
        - Minimum 4GB RAM recommended
        - Secure Boot compatible
        
        ## Installation
        1. Download the ISO file
        2. Verify checksum: \`sha256sum ${{ env.ISO_NAME }}\`
        3. Flash to USB using tools like \`dd\`, Balena Etcher, or Ventoy
        4. Boot from USB on your ARM64 device
        
        ## Changes in this ARM64 Version
        - UEFI-only boot configuration
        - ARM64-optimized GRUB bootloader
        - Removed x86-specific virtualization tools
        - Included ARM64-compatible drivers and firmware
        
        ## Files in this Release
        - \`${{ env.ISO_NAME }}\` - The main ISO file
        - \`${{ env.ISO_NAME }}.sha256\` - SHA256 checksum
        - \`${{ env.ISO_NAME }}.sha512\` - SHA512 checksum
        EOF
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        name: "Athena OS ARM64 ${{ github.event.inputs.release_tag || github.ref_name }}"
        body_path: release_notes.md
        files: |
          results/${{ env.ISO_NAME }}
          results/${{ env.ISO_NAME }}.sha256
          results/${{ env.ISO_NAME }}.sha512
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Summary
      run: |
        echo "## 🎉 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **ISO Name**: \`${{ env.ISO_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ env.ISO_SIZE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture**: ARM64 (aarch64) - Native Build" >> $GITHUB_STEP_SUMMARY
        echo "- **Fedora Version**: ${{ env.FEDORA_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Method**: Native ARM64 on macOS runner" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Checksums" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA256**: \`${{ env.ISO_SHA256 }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.ref }}" == refs/tags/* ]]; then
          echo "- ✅ Release created with ISO and checksums" >> $GITHUB_STEP_SUMMARY
          echo "- 📥 Download from the [Releases page](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- 📦 ISO available as workflow artifact" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Create a tag to trigger automatic release" >> $GITHUB_STEP_SUMMARY
        fi
